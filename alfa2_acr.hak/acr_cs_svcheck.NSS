////////////////////////////////////////////////////////////////////////////////
//
//  System Name : ALFA Core Rules
//     Filename : acr_cs_svcheck
//    $Revision:: 153         $ current version of the file
//        $Date:: 2006-10-09 #$ date the file was created or modified
//       Author : ç i p h é r
//
//    Var Prefix: ACR_CSG
//  Dependencies: None
//
//  Description
//  This file implements a generic saving throw function to be used in conversations.
//
//  Revision History
//  2006/10/05  ç i p h é r  Inception
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Includes ////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Constants ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Structures //////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Function Prototypes /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Function Definitions ////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

int StartingConditional(int nSaveType, int nDC)
{
    object oPC = GetPCSpeaker();

    // initialize the save roll
    int nSavingThrow = 0;

    // determine the type of saving throw to perform
    switch (nSaveType)
    {
        // make a fortitude save
        case SAVING_THROW_FORT:
            nSavingThrow = FortitudeSave(oPC, nDC, nSaveType);
            break;

        // make a reflex save
        case SAVING_THROW_REFLEX:
            nSavingThrow = ReflexSave(oPC, nDC, nSaveType);
            break;

        // make a will save
        case SAVING_THROW_WILL:
            nSavingThrow = WillSave(oPC, nDC, nSaveType);
            break;
    }

    // return TRUE or FALSE depending on the player's saving throw
    return (nSavingThrow >= nDC) ? TRUE : FALSE;
}
