
[Settings]

;
; 0 -> EDL_None     (No output is desired.)
; 1 -> EDL_Errors   (Only errors are displayed.  This is the default setting.)
; 2 -> EDL_Calls    (Calls are traced.)
; 3 -> EDL_Verbose  (Detailed debugging information about all instructions
;                    executed is displayed.)
;
; Default is 1 (if not set in INI file).
;

DebugLevel=1

;
; 0 -> Prefer to compile scripts to native code.  Only scripts that are
;      compiled to native code will yield a significant performance boost.
; 1 -> Prefer to run scripts in the reference VM, which is slower but provides
;      instruction level tracing capabilities depending on the debug level.
;
; Default is 0.
;

UseReferenceVM=0

;
; The plugin will only compile scripts to native code if the server has at
; least MinFreeMemoryToJIT (expressed in bytes) available.  Scripts that are
; compiled to native code consume additional memory, so this parameter may be
; used to tune the plugin's memory usage.  Only scripts that are compiled to
; native code will yield a significant performance boost.
;
; Each script compiled to native code generally consumes at least 64K of VA
; space as a minimum.
;
; Default is 268435456 (256MB) if not set in INI file.
; Setting to 0 will disable the memory quota.
;

MinFreeMemoryToJIT=268435456

;
; To conserve memory, the plugin can be configured to not compile very small
; scripts to native code.  There is less of a performance gain for running
; small scripts in the JIT engine, so this provides another tuning mechanism to
; trade memory usage for better performance (or vice versa).
;
; Default is 0 (if not set in INI file).
; Setting to 0 will disable the script size quota.
;

MinScriptSizeToJIT=1024

;
; The plugin can perform optimizations on the intermediate representation of
; compiled scripts before the JIT backend processes the IR.  This may improve
; code quality in some cases.
;
; Default is 0 (don't optimize IR).  The optimization feature is still
; somewhat experimental, so use this option with care.
;

OptimizeIR=0

;
; The plugin can be configured to load symbol files (*.ndb) with this option.
; If a script error occurs (or if verbose tracing mode is enabled in conjuction
; with the UseReferenceVM=1 option), symbols are used to annotate script
; functions in error call stacks and trace output.
;
; Scripts without debug symbols still function, but without symbolic names in
; tracing mode (or in error call stacks).
;
; Default is 1 (load debug symbols).
;

LoadDebugSymbols=1

;
; The plugin can be configured to save the generated MSIL DLLs for each script
; compiled to a specific directory.  The generated DLLs may be useful for
; debugging purposes (and may be inspected with the help of a tool such as
; ILDasm), but are not required for normal operation.
;
; Default is nothing (don't save generated MSIL DLLs).
;

; CodeGenOutputDirectory=C:\NWNX4\AsmOutput

;
; The plugin can be configured to enable managed scripts, authored in a CLR
; languages such as C#.  These scripts have greatly enhanced capabiities, and
; also have native access to all nwscript.nss engine functions.
;
; However, managed scripts are essentially native code and run with the same
; level of privileges as the game server itself.  Therefore, do not use managed
; scripts from untrusted sources.
;
; Managed scripts can be authored using the managed script runtime and the
; managed script packer application.
;
;
; Default is 0 (don't allow managed scripts).
;

AllowManagedScripts=0

;
; Execution guards can be completely disabled for JIT'd scripts, if desired.
; This option is not recommended.  Enabling it will disable checks against the
; loop iteration limit and call depth limit, which may allow a runaway script
; to hang or crash the server.
;
; Default is 0 (don't disable execution guards).
;

DisableExecutionGuards=0

;
; The maximum loop iteration limit for JIT'd scripts can be configured here.
; If 0 is assigned, the default internal limit of 100000 is used.
;
; This value is analogous (though not a direct match to) the instruction limit
; in the VM.
;
; Default is 0 (uses limit of 100000 loop iterations within a script).
;

MaxLoopIterations=0

;
; The maximum call depth limit for JIT'd scripts can be configured here.  If 0
; is assigned, the default internal limit of 128 call frames is used.
;
; Default is 0 (uses limit of 128 call stack frames within a script).
;

MaxCallDepth=0

;
; Certain action service handler calls, otherwise known as nwscript.nss engine
; functions, can be replaced with optimized versions when the JIT backend is
; active.  The optimized versions provide equivalent functionality but with
; faster performance.  For example, some string functions such as GetStringLeft
; can be accelerated in this fashion.
;
; The optimized action service handlers, however, will not log their arguments
; if the debug level is increased.  For debugging, it may be advantageous to
; disable optimized action service handlers if it is desired to trace all of
; the action service calls made by a script.
;
; Default is 1 (substitute built-in implementations for certain action service
; handler calls).
;

OptimizeActionServiceHandlers=1
